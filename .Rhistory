install.packages("forcats")
View(mtcars)
set.seed(123)
# Generate the outcomes of basketball shots
shots <- rbinom(n = 10, size = 1, prob = 0.9)
print(shots)
# Draw the frequency chart of the results
barplot(table(shots)
barplot(table(shots))
setwd("~/Paper Masterarbeit")
# Load necessary libraries
library(tidyverse)
library(psych)
library(kableExtra)
library(foreign)
data_alle_Gruppen <- read.spss("SPSS_20171211 mit Datensatz 1 N=319x3 alle Gruppen.sav",  use.value.labels = TRUE, to.data.frame = TRUE)
data_Gamer <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 GAMER.sav",  use.value.labels = TRUE, to.data.frame = TRUE)
data_Porno <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 PORNO.sav",  use.value.labels = TRUE, to.data.frame = TRUE)
data_SNS <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 SNS.sav",
use.value.labels = TRUE, to.data.frame = TRUE)
categorical_DemData <- data_alle_Gruppen %>% select(Anwendung,
Gewissenhaftigkeit,
sIAT_classification,
Geschlecht:Muttersprache,
Partnerschaft:Erwerbssituation_nicht_erwerbst√§tig,
Internetnutzung_Sitzung,
Anwendungsspezifizierung_OG,
Anwendungsspezifizierung_SNS,
Gewissenhaftigkeit_Auswahl,
MISSING,
IGDQ_Check,
Bearbeitungszeit_Check,
OP_Spezifizierung_Bilder:OP_Sexuelle_Orientierung)
continuous_DemData <- data_alle_Gruppen %>% select(Summenscore_FINE_gesamt:Summenscore_sIAT,
IUES_positive:IUES_avoidance,
Alter_Freitext,
Internetnutzung_Woche,
Nutzungszeit,
TIME_SUM,
IUES_Check:BSI_Check,
Skalenwert_G_SOMA:PSDI)
categorical_DemData <- categorical_DemData %>% mutate_if(is.numeric, as.factor)
summary_categorical <- summary(categorical_DemData)
summary_continuous <- summary(continuous_DemData)
continuous_plot <- ggplot(gather(continuous_DemData), aes(value)) +
geom_histogram(bins = 30) +
facet_wrap(~key, scales = 'free_x') +
coord_flip()
continuous_plot
continuous_plot <- ggplot(gather(continuous_DemData), aes(value)) +
geom_histogram(bins = 30) +
facet_wrap(~key, scales = 'free_x')
continuous_plot
categorical_plots <- ggplot(gather(categorical_DemData), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x')
categorical_plots
continuous_plots <- ggplot(gather(continuous_DemData), aes(value)) +
geom_histogram(bins = 30) +
facet_wrap(~key, scales = 'free_x')
categorical_plots <- ggplot(gather(categorical_DemData), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x') +
coord_flip()
categorical_plots
categorical_plots <- ggplot(gather(categorical_DemData), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x')
categorical_plots
categorical_plots <- ggplot(gather(categorical_DemData), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x') +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
categorical_plots
categorical_plots <- ggplot(gather(categorical_DemData), aes(value)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
facet_wrap(~key, scales = 'free_x')
categorical_plots
categorical_plots <- ggplot(gather(categorical_DemData), aes(value)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
facet_wrap(~key)
categorical_plots
categorical_plots <- ggplot(gather(categorical_DemData), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x')
install.packages("sjPlot")
install.packages("sjstats")
library(sjPlot)
library(sjstats)
# Descriptive Item Statistics N1 ----
Fine_allg_items <- data_alle_Gruppen %>% select(FINE_allg_01:FINE_allg_31)
View(data_alle_Gruppen)
data_alle_Gruppen <- read.spss("SPSS_20171211 mit Datensatz 1 N=319x3 alle Gruppen.sav", to.data.frame = TRUE)
data_Gamer <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 GAMER.sav", to.data.frame = TRUE)
data_Porno <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 PORNO.sav", to.data.frame = TRUE)
data_SNS <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 SNS.sav", to.data.frame = TRUE)
Fine_spez_items_gaming <- data_alle_Gruppen %>%
filter(Anwendung == 1) %>%
select(FINE_spez_01:FINE_spez_12)
IU02_items <- data_alle_Gruppen %>% select(IU02_01:IU02_08)
FK01_items <- data_alle_Gruppen %>% select(FK01_01:FK01_10)
IA01_items <- data_alle_Gruppen %>% select(IA01_01:IA01_12)
ID01_items <- data_alle_Gruppen %>% select(contains("ID01"))
BSI_items <- data_alle_Gruppen %>% select(contains("BSI"))
BSI_items <- data_alle_Gruppen %>% select(contains("BSI_"))
BSI_items <- data_alle_Gruppen %>% select(BSI_01:BSI_53)
Fine_spez_items_sns <- data_alle_Gruppen %>%
filter(Anwendung == 2) %>%
select(FINE_spez_01:FINE_spez_12)
Fine_spez_items_porno <- data_alle_Gruppen %>%
filter(Anwendung == 3) %>%
select(FINE_spez_01:FINE_spez_12)
data_alle_Gruppen <- read.spss("SPSS_20171211 mit Datensatz 1 N=319x3 alle Gruppen.sav", to.data.frame = TRUE)
data_Gamer <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 GAMER.sav", to.data.frame = TRUE)
data_Porno <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 PORNO.sav", to.data.frame = TRUE)
data_SNS <- read.spss("SPSS_20171213 mit Datensatz 2 N=319 SNS.sav", to.data.frame = TRUE)
View(data_Gamer)
data_alle_Gruppen <- read.spss("SPSS_20171211 mit Datensatz 1 N=319x3 alle Gruppen.sav", to.data.frame = TRUE, use.value.labels = F)
View(data_alle_Gruppen)
Fine_allg_items <- data_alle_Gruppen %>% select(FINE_allg_01:FINE_allg_31)
Fine_spez_items_gaming <- data_alle_Gruppen %>%
filter(Anwendung == 1) %>%
select(FINE_spez_01:FINE_spez_12)
Fine_spez_items_sns <- data_alle_Gruppen %>%
filter(Anwendung == 2) %>%
select(FINE_spez_01:FINE_spez_12)
Fine_spez_items_porno <- data_alle_Gruppen %>%
filter(Anwendung == 3) %>%
select(FINE_spez_01:FINE_spez_12)
IU02_items <- data_alle_Gruppen %>% select(IU02_01:IU02_08)
FK01_items <- data_alle_Gruppen %>% select(FK01_01:FK01_11)
FK02_items <- data_alle_Gruppen %>% select(FK02_01:FK02_11)
FK03_items <- data_alle_Gruppen %>% select(FK03_01:FK03_11)
FK03_items <- data_alle_Gruppen %>% select(FK03_01:FK03_10)
IA01_items <- data_alle_Gruppen %>% select(IA01_01:IA01_12)
ID01_items <- data_alle_Gruppen %>% select(contains("ID01"))
BSI_items <- data_alle_Gruppen %>% select(BSI_01:BSI_53)
tab_itemscale(Fine_allg_items)
tab_itemscale(Fine_allg_items, show.shapiro = T, show.kurtosis = T, show.corr.matrix = T)
questionnaire_list <- list(Fine_allg_items, Fine_spez_items_gaming, Fine_spez_items_porno,
Fine_spez_items_sns, IU02_items, FK01_items, FK02_items, FK03_items,
IA01_items, ID01_items, BSI_items)
lapply(questionnaire_list, tab_itemscale, show.shapiro = T, show.kurtosis = T, show.corr.matrix = T)
item_statistics <- lapply(questionnaire_list, tab_itemscale, show.shapiro = T, show.kurtosis = T, show.corr.matrix = T)
item_statistics[[1]]
item_statistics[[4]]
item_statistics[[1]]
item_statistics[[2]]
item_statistics[[3]]
item_statistics[[4]]
item_statistics[[5]]
item_statistics[[6]]
item_statistics[[7]]
item_statistics[[8]]
item_statistics[[9]]
item_statistics[[10]]
item_statistics[[11]]
summary(Fine_allg_items)
summary(Fine_spez_items_gaming)
cutoff <- qchisq(1 - 0.01, ncol(Fine_allg_items))
mahal <- mahalanobis(Fine_allg_items,
colMeans(Fine_allg_items),
cov(Fine_allg_items))
summary(mahal < cutoff)
cutoff <- qchisq(1 - 0.001, ncol(Fine_allg_items))
mahal <- mahalanobis(Fine_allg_items,
colMeans(Fine_allg_items),
cov(Fine_allg_items))
summary(mahal < cutoff)
correl <- cor(Fine_allg_items, use = "pairwise.complete.obs")
symnum(correl)
correl_table <- symnum(correl)
# assumption set up
random = rchisq(nrow(Fine_allg_items), 6)
fake = lm(random ~ ., data = Fine_allg_items)
standardized = rstudent(fake)
fitted = scale(fake$fitted.values)
hist(standardized)
# homogeneity
plot(fitted, standardized)
abline(0,0)
plot(fitted, standardized)
abline(0,0)
abline(v = 0)
install.packages("GPArotation")
library(GPArotation)
qqnorm(standardized)
abline(0,1)
# correlation adequacy Barlett's test
cortest.barlett(correl, n = nrow(Fine_allg_items))
# correlation adequacy Barlett's test
cortest.bartlett(correl, n = nrow(Fine_allg_items))
# sampling adequacy KMO test
KMO(correl)
# how many factors
nofactors <- fa.parallel(Fine_allg_items, fm = "ml", fa = "fa")
nofactors <- fa.parallel(Fine_allg_items, fm = "ml", fa = "fa")
sum(nofactors$fa.values > 1.0)
sum(nofactors$fa.values > 0.7)
setwd()
sulfur <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/sulfur.csv')
library(tidyverse)
volcano <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/volcano.csv')
library(psych)
fx <-matrix(c( .9,.8,.6,rep(0,4),.6,.8,-.7),ncol=2)
fy <- matrix(c(.6,.5,.4),ncol=1)
print(fx)
print(fy)
rownames(fx) <- c("V","Q","A","nach","Anx")
Phi <-matrix( c(1,0,.7,.0,1,.7,.7,.7,1),ncol=3)
print(fx)
rownames(fy)<- c("gpa","Pre","MA")
gre.gpa <- sim.structural(fx,Phi,fy)
print(gre.gpa)
#now esem it:
example <- esem(gre.gpa$model,varsX=1:5,varsY=6:8,nfX=2,nfY=1,n.obs=1000,plot=TRUE)
esem.diagram(example,simple=FALSE)
print(phi)
print(Phi)
library(tidyverse)
volcano <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/volcano.csv')
eruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')
events <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/events.csv')
tree_rings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/tree_rings.csv')
sulfur <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/sulfur.csv')
library(tidyverse)
volcano <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/volcano.csv')
eruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')
events <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/events.csv')
tree_rings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/tree_rings.csv')
sulfur <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/sulfur.csv')
erup_events <- events %>%
left_join(eruptions, by=c("volcano_number", "volcano_name", "eruption_number"))
erup_event_volcano <- erup_events %>%
left_join(volcano, by = c("volcano_number", "volcano_name"), suffix = c("_erruption", "_volcano"))
sulfur$year <- floor(sulfur$year)
sulfur_by_year <- sulfur %>%
group_by(year) %>%
summarize(mean_neem = mean(neem, na.rm = TRUE),
mean_wdc = mean(wdc, na.rm = TRUE))
erup_event_volcano <- erup_event_volcano %>%
left_join(sulfur_by_year, by = c("end_year"="year"))
erup_event_volcano <- erup_event_volcano %>%
left_join(tree_rings, by = c("end_year"="year"))
glimpse(erup_event_volcano)
erup_event_volcano %>% is.na() %>% colSums()
erup_event_volcano_lm <- erup_event_volcano %>% filter(!is.na(vei), is.na(population_within_5_km))
ggplot(erup_event_volcano_lm, aes(vei)) +
geom_histogram()
ggplot(erup_event_volcano_lm, aes(vei)) +
geom_bar()
ggplot(erup_event_volcano_lm, aes(population_within_10_km)) +
geom_histogram()
ggplot(erup_event_volcano_lm, aes(population_within_10_km)) +
geom_bar()
erup_event_volcano_lm %>%
group_by(volcano_name) %>%
ggplot(aes(vei)) +
geom_bar()
erup_event_volcano_lm %>%
group_by(eruption_number) %>%
ggplot(aes(vei)) +
geom_bar()
erup_event_volcano_lm %>%
group_by(eruption_number) %>%
count(vei) %>%
ggplot(aes(n)) +
geom_bar()
erup_event_volcano_lm %>%
group_by(eruption_number) %>%
ggplot(aes(vei)) +
geom_bar()
View(erup_event_volcano)
summary(erup_event_volcano_lm$vei)
table(erup_event_volcano_lm$vei)
ggplot(erup_event_volcano_lm, aes(population_within_10_km)) +
geom_density()
summary(erup_event_volcano_lm$population_within_10_km)
erup_event_volcano_lm <- erup_event_volcano %>% filter(!is.na(vei), !is.na(population_within_5_km))
erup_event_volcano_lm %>%
group_by(eruption_number) %>%
ggplot(aes(vei)) +
geom_bar()
ggplot(erup_event_volcano_lm, aes(population_within_10_km)) +
geom_density()
library(tidyverse)
volcano <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/volcano.csv')
eruptions <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/eruptions.csv')
events <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/events.csv')
tree_rings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/tree_rings.csv')
sulfur <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/sulfur.csv')
summary(volcano)
summary(events)
summary(eruptions)
summary(sulfur)
summary(tree_rings)
erup_events <- events %>%
left_join(eruptions, by=c("volcano_number", "volcano_name", "eruption_number"))
erup_event_volcano <- erup_events %>%
left_join(volcano, by = c("volcano_number", "volcano_name"), suffix = c("_erruption", "_volcano"))
sulfur$year <- floor(sulfur$year)
sulfur_by_year <- sulfur %>%
group_by(year) %>%
summarize(mean_neem = mean(neem, na.rm = TRUE),
mean_wdc = mean(wdc, na.rm = TRUE))
erup_event_volcano <- erup_event_volcano %>%
left_join(sulfur_by_year, by = c("end_year"="year"))
erup_event_volcano <- erup_event_volcano %>%
left_join(tree_rings, by = c("end_year"="year"))
glimpse(erup_event_volcano)
erup_event_volcano %>% is.na() %>% colSums()
erup_event_volcano_lm <- erup_event_volcano %>% filter(!is.na(vei), !is.na(population_within_5_km))
erup_event_volcano_lm %>%
group_by(eruption_number) %>%
ggplot(aes(vei)) +
geom_bar()
install.packages("shiny")
install.packages("shinyWidgets")
install.packages("leaflet")
View(erup_event_volcano)
shiny::runApp('Volcanos')
runApp('Volcanos')
runApp('Volcanos')
runApp('Volcanos')
runApp('Volcanos')
